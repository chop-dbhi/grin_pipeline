rule gemini_db:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.anno.vcf.gz",
        gemini_python = config['tools']['gemini']['gemini_python'],
        vcf2db = config['tools']['vcf2db'],
        pedfile = config['pedfile']
    output:
        gemini_db = config['landing_dir'][freeze] + config['results']['gemini'] + "/{file}.ad.de.nm.snpeff.anno.db"
    shell:
        """
        {input.gemini_python} {input.vcf2db} --legacy-compression {input.vcf} {input.pedfile} {output.gemini_db}
        """

# get inheritance models
rule get_models:
    input:
        gemini_db = config['landing_dir'][freeze] + config['results']['gemini'] + "/{file}.ad.de.nm.snpeff.anno.db",
        gemini_tool = config['tools']['gemini']['gemini_tool'] 
    output:
        gemini_out = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.{model,(denovo|arhomo|cmpdhet|xlinked)}.txt"
    run:
        model_lut = {"denovo":"de_novo","arhomo":"autosomal_recessive","cmpdhet":"comp_hets","xlinked":"x_linked_recessive"}
        modelname = model_lut[wildcards.model]
        shell("{input.gemini_tool} {modelname} -d 15 --filter \"impact_severity != 'LOW'\" {input.gemini_db} > {output.gemini_out}")

# get posterior probability from dnm
rule run_denovogear:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.trio.vcf",
        ped = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.nohead.pedfile"
    output:
        dnm_auto = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.trio.com.filtered.dnm_auto.txt"
    shell:
        """
        echo "SNP_INDEL CHILD_ID chr pos ref alt maxlike_null pp_null tgt_null(child/mom/dad) snpcode code maxlike_dnm pp_dnm tgt_dnm lookup flag child_rd dad_rd mom_rd child_mq dad_mq mom_mq" > {output.dnm_auto}
        dng dnm auto --vcf {input.vcf} --ped {input.ped} | \
        sed 's/CHILD_ID: //g;s/chr: //g;s/pos: //g;s/ref: //g;s/alt: //g;s/maxlike_null: //g;s/pp_null: //g;s/tgt: //g;s/tgt_null(child\/mom\/dad): //g;s/snpcode: //g;s/code: //g;s/maxlike_dnm: //g;s/pp_dnm: //g;s/tgt_dnm(child\/mom\/dad): //g;s/lookup: //g;s/flag: //g;s/READ_DEPTH child: //g;s/dad: //g;s/mom: //g;s/MAPPING_QUALITY child: //g;s/dad: //g;s/mom: //g' >> {output.dnm_auto}
        """

# make gemini reports
# rule variantAnalysisModels:
#     input:
#         denovo = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.denovo.txt",
#         denovogear = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.dnm_auto.txt",
#         arhomo = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.arhomo.txt",
#         cmpdhet = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.cmpdhet.txt",
#         xlinked = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.xlinked.txt",
#         source = "reports/grin_epilepsy_models_gemini.Rmd"
#     output:
#         html = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.models.html"
#     params:
#         dirpath = config['landing_dir'][freeze] + config['results']['analysis'],
#         outfile = "/{file}.ad.de.nm.snpeff.models.html"
#     run:
#         R("""
#         library(rmarkdown)
#         # returns 0 if file is empty
#         denovo <- tryCatch(expr = read.delim('{input.denovo}', stringsAsFactors = F), error = function(e) 0)
#         denovogear <- tryCatch(expr = read.table('{input.denovogear}', header = T), error = function(e) 0)
#         arhomo <- tryCatch(expr = read.delim('{input.arhomo}', stringsAsFactors = F), error = function(e) 0)
#         cmpdhet <- tryCatch(expr = read.delim('{input.cmpdhet}', stringsAsFactors = F), error = function(e) 0)
#         xlinked <- tryCatch(expr = read.delim('{input.xlinked}', stringsAsFactors = F), error = function(e) 0)
#         rmarkdown::render(input = "{input.source}", output_file = "{params.outfile}", output_dir = "{params.dirpath}")
#         """)

# split gemini reports
rule variantAnalysisModels:
    input:
        x = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.{model}.txt",
        denovogear = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.dnm_auto.txt",
        source = "reports/grin_epilepsy_models_gemini_{model}.Rmd",
        rvis = "annotations/rvis.RData"
    output:
        html = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.{model}.html"
    params:
        dirpath = config['landing_dir'][freeze] + config['results']['analysis'],
        outfile = "/{file}.ad.de.nm.snpeff.{model}.html"
    run:
        R("""
        library(rmarkdown)
        library(tools)
        # returns 0 if file is empty
        rvis <- get(load('{input.rvis}'))
        x <- '{input.x}'
        trio <- x
        x <- sub('.txt','',x)
        x <- sub('.*anno.','',x)
        trio <- sub('[.].*','',trio)
        trio <- sub('.*[/]','',trio)
        title <- paste0(toTitleCase(as.character(trio)), " | ", toTitleCase(as.character(x))," | ", as.character("GRIN Epilepsy Trio Analysis"))
        y <- tryCatch(expr = read.delim('{input.x}', stringsAsFactors = F), error = function(e) 0)
        assign(x, y)
        denovogear <- tryCatch(expr = read.table('{input.denovogear}', header = T), error = function(e) 0)
        rmarkdown::render(input = "{input.source}", output_file = "{params.outfile}", output_dir = "{params.dirpath}", params = list(title = title))
        """)

# alter records that have a '*' in the ALT field - these are causing problems in VariantAnnotation
# https://github.com/Bioconductor-mirror/VariantAnnotation/commit/837f1f0c9fdcdc9de7677a9a067963413dfe26e7
rule noasterisk:
    input:
        vcf = "{file}.vcf"
    output:
        vcf = "{file}.noask.vcf"
    shell:
        """
        cat {input} | sed -e 's/\*/N/g' > {output}
        """

def getGender(proband):
    res = SAMPLE_TABLE.loc[SAMPLE_TABLE['Subject'] ==  proband,"Sex"]
    sex = str(res.values[0])
    return sex

# boys only
def xlinked(wildcards):
    if getGender(wildcards.pro)=='M':
        return config['landing_dir'][freeze] + config['results']['analysis'] + "/{0}_{1}.{2}.xlinked.RData".format(wildcards.family,wildcards.pro,wildcards.ext)
    else:
        return []

