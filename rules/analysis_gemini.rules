# create geminidb
rule gemini_db:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.anno.vcf.gz",
        gemini_python = config['tools']['gemini']['gemini_python'],
        vcf2db = config['tools']['vcf2db'],
        pedfile = config['pedfile']
    output:
        gemini_db = config['landing_dir'][freeze] + config['results']['gemini'] + "/{file}.ad.de.nm.snpeff.anno.db"
    shell:
        """
        {input.gemini_python} {input.vcf2db} --legacy-compression {input.vcf} {input.pedfile} {output.gemini_db}
        """

# get inheritance models
rule get_models:
    input:
        gemini_db = config['landing_dir'][freeze] + config['results']['gemini'] + 
        "/{file}.ad.de.nm.snpeff.anno.db",
        gemini_tool = config['tools']['gemini']['gemini_tool'] 
    output:
        gemini_out = config['landing_dir'][freeze] + config['results']['analysis'] + 
        "/{file}.ad.de.nm.snpeff.anno.{model,(denovo|arhomo|cmpdhet|xlinked)}.txt"
    run:
        model_lut = {"denovo":"de_novo","arhomo":"autosomal_recessive","cmpdhet":"comp_hets","xlinked":"x_linked_recessive"}
        modelname = model_lut[wildcards.model]
        shell("{input.gemini_tool} {modelname} {input.gemini_db} > {output.gemini_out}")

# make gemini reports
rule variantAnalysisModels:
    input:
        denovo = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.denovo.txt",
        arhomo = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.arhomo.txt",
        cmpdhet = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.cmpdhet.txt",
        xlinked = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.anno.xlinked.txt",
        source = "reports/grin_epilepsy_models_gemini.Rmd"
    output:
        html = config['landing_dir'][freeze] + config['results']['analysis'] + "/{file}.ad.de.nm.snpeff.models.html"
    params:
        dirpath = config['landing_dir'][freeze] + config['results']['analysis'],
        outfile = "/{file}.ad.de.nm.snpeff.models.html"
    run:
        R("""
        library(rmarkdown)
        options(scipen = 999, stringsAsFactors = F)
        # returns 0 if file is empty
        denovo <- tryCatch(expr = read.delim('{input.denovo}', stringsAsFactors = F), error = function(e) 0)
        arhomo <- tryCatch(expr = read.delim('{input.arhomo}', stringsAsFactors = F), error = function(e) 0)
        cmpdhet <- tryCatch(expr = read.delim('{input.cmpdhet}', stringsAsFactors = F), error = function(e) 0)
        xlinked <- tryCatch(expr = read.delim('{input.xlinked}', stringsAsFactors = F), error = function(e) 0)
        rmarkdown::render(input = "{input.source}", output_file = "{params.outfile}", output_dir = "{params.dirpath}")
        """)
