# modify vcf - replace Number=. with Number=R
rule ad_vcf:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.vcf"
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.vcf"
    params:
        ref = config['ref'][freeze]
    shell:
        """
        cat {input} | sed 's/ID=AD,Number=./ID=AD,Number=R/' > {output}
        """

# decompose multiallelic variants into biallelic in a VCF file.
rule decompose_for_gemini:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.vcf",
        vt = ENV3 + config['tools']['vt']
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.vcf"
    shell:
        """
        {input.vt} decompose -s -o {output} {input.vcf}
        """

# normalize the variants
rule normalize_for_gemini:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.vcf",
        vt = ENV3 + config['tools']['vt']
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.vcf"
    params:
        ref = config['ref'][freeze]
    shell:
        """
        {input.vt} normalize -r {params.ref} -o {output} {input.vcf}
        """

# summarize the variants in a VCF file
rule vcf_qt:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.vcf",
        vt = ENV3 + config['tools']['vt']
    output:
        vcf = config['process_dir'][freeze] + config['results']['vtmeta'] + "/{file}.vtpeek.txt"
    params:
        ref = config['ref'][freeze]
    shell:
        """
        {input.vt} peek {input.vcf} 2> {output}
        """

# profile mendelian errors
rule vcf_profile:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.vcf",
        vt = ENV3 + config['tools']['vt'],
        ped = config['pedfile']
    output:
        vcf = config['process_dir'][freeze] + config['results']['vtmeta'] + "/{file}.vtmendelprofile.txt"
    params:
        ref = config['ref'][freeze]
    shell:
        """
        {input.vt} profile_mendelian -p {input.ped} -x mendel {input.vcf} 2> {output}
        """

# ud - upstream downstream interval length (in bases)
# annotate gene and transcript impact using snpeff
rule run_snpeff:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.vcf",
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.vcf"
    params:
        snpeff  = config['jars']['snpeff']['path'],
        conf =  config['jars']['snpeff']['cnf'][freeze],
        opts = config['tools']['opts']['med'] + ' ' + config['javatmpdir'],
        database = config['jars']['snpeff']['db'][freeze],
        updown = config['jars']['snpeff']['ud'],
        format = config['jars']['snpeff']['format']
    shell:
        """
        source activate grinenv 
        {params.snpeff} \
        {params.opts} \
        -c {params.conf} \
        -ud {params.updown} \
        {params.format} \
        {params.database} \
         {input.vcf} > {output.vcf}
        """

# bgzip query vcf
rule compress_vcf:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.vcf",
        bgzip = ENV3 + config['tools']['bgzip']
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.vcf.bgz",
    shell:
        """
        {input.bgzip} -c {input.vcf} > {output}
        """

# tabix query vcf
rule tabix:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.vcf.bgz",
        tabix = ENV3 + config['tools']['tabix']
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.vcf.bgz.tbi",
    shell:
        """
        {input.tabix} -p vcf {input.vcf}
        """

rule annotate_using_vcfanno:
    input:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.vcf.bgz",
        vcfanno = ENV3 + config['tools']['vcfanno']['path'],
        lua = config['tools']['vcfanno']['lua'],
        conf = config['tools']['vcfanno']['conf'],
        bgzip = ENV3 + config['tools']['bgzip']
    output:
        vcf = config['landing_dir'][freeze] + config['results']['vcfs'] + "/{file}.ad.de.nm.snpeff.anno.vcf.gz"
    params:
        processes = 4,
        base_path = config['tools']['gemini']['gemini_anno']
    shell:
        """
        {input.vcfanno} -p {params.processes} \
        -base-path {params.base_path} \
        -lua {input.lua} \
        {input.conf} \
        {input.vcf} | {input.bgzip} -c > {output.vcf}
        """